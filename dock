# 数据库重构说明

## 概述

本次重构将原有的基于原生SQL的数据库操作改为使用GORM ORM框架，并采用了Repository模式和分层架构。

## 新的目录结构

```
db/
├── connection.go          # 数据库连接管理
├── entity/               # 实体模型
│   ├── pan.go
│   ├── cks.go
│   ├── category.go
│   ├── tag.go
│   ├── resource.go
│   ├── resource_tag.go
│   └── ready_resource.go
├── repo/                 # Repository层
│   ├── base.go           # 基础Repository接口和实现
│   ├── pan_repository.go
│   ├── cks_repository.go
│   ├── resource_repository.go
│   ├── category_repository.go
│   ├── tag_repository.go
│   ├── ready_resource_repository.go
│   └── manager.go        # Repository管理器
├── dto/                  # 数据传输对象
│   ├── request.go        # 请求DTO
│   └── response.go       # 响应DTO
└── converter/            # 转换器
    └── converter.go      # 实体与DTO转换
```

## 主要改进

### 1. 使用GORM ORM
- 自动迁移表结构
- 关联关系管理
- 软删除支持
- 事务处理

### 2. Repository模式
- 抽象数据访问层
- 统一的CRUD操作接口
- 业务逻辑与数据访问分离

### 3. 分层架构
- Entity层：数据模型
- Repository层：数据访问
- DTO层：数据传输
- Converter层：数据转换
- Handler层：业务逻辑

### 4. 类型安全
- 使用泛型实现通用Repository
- 强类型的请求和响应对象
- 统一的错误处理

## 实体模型

### Pan (平台)
```go
type Pan struct {
    ID        uint           `json:"id" gorm:"primaryKey;autoIncrement"`
    Name      string         `json:"name" gorm:"size:64;comment:平台名称"`
    Key       int            `json:"key" gorm:"comment:平台标识"`
    Ck        string         `json:"ck" gorm:"type:text;comment:cookie"`
    IsValid   bool           `json:"is_valid" gorm:"default:true;comment:是否有效"`
    Space     int64          `json:"space" gorm:"default:0;comment:总空间"`
    LeftSpace int64          `json:"left_space" gorm:"default:0;comment:剩余空间"`
    Remark    string         `json:"remark" gorm:"size:64;not null;comment:备注"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at" gorm:"index"`
    
    // 关联关系
    Cks []Cks `json:"cks" gorm:"foreignKey:PanID"`
}
```

### Resource (资源)
```go
type Resource struct {
    ID           uint           `json:"id" gorm:"primaryKey;autoIncrement"`
    Title        string         `json:"title" gorm:"size:255;not null;comment:资源标题"`
    Description  string         `json:"description" gorm:"type:text;comment:资源描述"`
    URL          string         `json:"url" gorm:"size:128;comment:资源链接"`
    PanID        *uint          `json:"pan_id" gorm:"comment:平台ID"`
    QuarkURL     string         `json:"quark_url" gorm:"size:500;comment:夸克链接"`
    FileSize     string         `json:"file_size" gorm:"size:100;comment:文件大小"`
    CategoryID   *uint          `json:"category_id" gorm:"comment:分类ID"`
    ViewCount    int            `json:"view_count" gorm:"default:0;comment:浏览次数"`
    IsValid      bool           `json:"is_valid" gorm:"default:true;comment:是否有效"`
    IsPublic     bool           `json:"is_public" gorm:"default:true;comment:是否公开"`
    CreatedAt    time.Time      `json:"created_at"`
    UpdatedAt    time.Time      `json:"updated_at"`
    DeletedAt    gorm.DeletedAt `json:"deleted_at" gorm:"index"`

    // 关联关系
    Category Category `json:"category" gorm:"foreignKey:CategoryID"`
    Pan      Pan      `json:"pan" gorm:"foreignKey:PanID"`
    Tags     []Tag    `json:"tags" gorm:"many2many:resource_tags;"`
}
```

## Repository接口

### 基础Repository
```go
type BaseRepository[T any] interface {
    Create(entity *T) error
    FindByID(id uint) (*T, error)
    FindAll() ([]T, error)
    Update(entity *T) error
    Delete(id uint) error
    FindWithPagination(page, limit int) ([]T, int64, error)
}
```

### 资源Repository
```go
type ResourceRepository interface {
    BaseRepository[entity.Resource]
    FindWithRelations() ([]entity.Resource, error)
    FindByCategoryID(categoryID uint) ([]entity.Resource, error)
    FindByPanID(panID uint) ([]entity.Resource, error)
    FindByIsValid(isValid bool) ([]entity.Resource, error)
    FindByIsPublic(isPublic bool) ([]entity.Resource, error)
    Search(query string, categoryID *uint, page, limit int) ([]entity.Resource, int64, error)
    IncrementViewCount(id uint) error
    FindWithTags() ([]entity.Resource, error)
    UpdateWithTags(resource *entity.Resource, tagIDs []uint) error
}
```

## 使用示例

### 初始化数据库
```go
// 在main.go中
if err := db.InitDB(); err != nil {
    log.Fatal("数据库连接失败:", err)
}

// 创建Repository管理器
repoManager := db.NewRepositoryManager(db.DB)
handlers.SetRepositoryManager(repoManager)
```

### 在Handler中使用
```go
// 获取资源列表
resources, err := repoManager.ResourceRepository.FindWithRelations()
if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
}

// 转换为响应DTO
responses := converter.ToResourceResponseList(resources)
c.JSON(http.StatusOK, responses)
```

## 迁移指南

### 1. 更新依赖
```bash
go get -u gorm.io/gorm gorm.io/driver/postgres
```

### 2. 更新导入
将 `res_db/models` 替换为 `res_db/db`

### 3. 更新Handler
使用新的Repository接口替代原生SQL查询

### 4. 测试
确保所有API端点正常工作

## 优势

1. **代码复用**：通用Repository减少重复代码
2. **类型安全**：编译时检查，减少运行时错误
3. **易于维护**：清晰的分层结构
4. **自动迁移**：GORM自动处理表结构变更
5. **关联查询**：自动处理复杂的关联关系
6. **软删除**：支持数据恢复
7. **事务支持**：自动事务管理

## 注意事项

1. 确保数据库连接配置正确
2. 首次运行会自动创建表结构
3. 软删除的记录不会真正删除
4. 关联查询可能影响性能，需要合理使用
5. 大量数据时需要考虑分页优化 